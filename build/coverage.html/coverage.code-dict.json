{"/home/travis/build/npmtest/node-npmtest-electron-react-boilerplate/test.js":"/* istanbul instrument in package npmtest_electron_react_boilerplate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-react-boilerplate/lib.npmtest_electron_react_boilerplate.js":"/* istanbul instrument in package npmtest_electron_react_boilerplate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_electron_react_boilerplate = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_electron_react_boilerplate = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-react-boilerplate/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-electron-react-boilerplate && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_electron_react_boilerplate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_electron_react_boilerplate\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_electron_react_boilerplate.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_electron_react_boilerplate.rollup.js'] =\n            local.assetsDict['/assets.npmtest_electron_react_boilerplate.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_electron_react_boilerplate.__dirname + '/lib.npmtest_electron_react_boilerplate.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-react-boilerplate/node_modules/electron-react-boilerplate/main.development.js":"import { app, BrowserWindow, Menu, crashReporter, shell } from 'electron';\n\nlet menu;\nlet template;\nlet mainWindow = null;\n\ncrashReporter.start();\n\nif (process.env.NODE_ENV === 'development') {\n  require('electron-debug')();\n}\n\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') app.quit();\n});\n\n\napp.on('ready', () => {\n  mainWindow = new BrowserWindow({\n    show: false,\n    width: 1024,\n    height: 728\n  });\n\n  mainWindow.loadURL(`file://${__dirname}/app/app.html`);\n\n  mainWindow.webContents.on('did-finish-load', () => {\n    mainWindow.show();\n    mainWindow.focus();\n  });\n\n  mainWindow.on('closed', () => {\n    mainWindow = null;\n  });\n\n  if (process.env.NODE_ENV === 'development') {\n    mainWindow.openDevTools();\n  }\n\n  if (process.platform === 'darwin') {\n    template = [{\n      label: 'Electron',\n      submenu: [{\n        label: 'About ElectronReact',\n        selector: 'orderFrontStandardAboutPanel:'\n      }, {\n        type: 'separator'\n      }, {\n        label: 'Services',\n        submenu: []\n      }, {\n        type: 'separator'\n      }, {\n        label: 'Hide ElectronReact',\n        accelerator: 'Command+H',\n        selector: 'hide:'\n      }, {\n        label: 'Hide Others',\n        accelerator: 'Command+Shift+H',\n        selector: 'hideOtherApplications:'\n      }, {\n        label: 'Show All',\n        selector: 'unhideAllApplications:'\n      }, {\n        type: 'separator'\n      }, {\n        label: 'Quit',\n        accelerator: 'Command+Q',\n        click() {\n          app.quit();\n        }\n      }]\n    }, {\n      label: 'Edit',\n      submenu: [{\n        label: 'Undo',\n        accelerator: 'Command+Z',\n        selector: 'undo:'\n      }, {\n        label: 'Redo',\n        accelerator: 'Shift+Command+Z',\n        selector: 'redo:'\n      }, {\n        type: 'separator'\n      }, {\n        label: 'Cut',\n        accelerator: 'Command+X',\n        selector: 'cut:'\n      }, {\n        label: 'Copy',\n        accelerator: 'Command+C',\n        selector: 'copy:'\n      }, {\n        label: 'Paste',\n        accelerator: 'Command+V',\n        selector: 'paste:'\n      }, {\n        label: 'Select All',\n        accelerator: 'Command+A',\n        selector: 'selectAll:'\n      }]\n    }, {\n      label: 'View',\n      submenu: (process.env.NODE_ENV === 'development') ? [{\n        label: 'Reload',\n        accelerator: 'Command+R',\n        click() {\n          mainWindow.restart();\n        }\n      }, {\n        label: 'Toggle Full Screen',\n        accelerator: 'Ctrl+Command+F',\n        click() {\n          mainWindow.setFullScreen(!mainWindow.isFullScreen());\n        }\n      }, {\n        label: 'Toggle Developer Tools',\n        accelerator: 'Alt+Command+I',\n        click() {\n          mainWindow.toggleDevTools();\n        }\n      }] : [{\n        label: 'Toggle Full Screen',\n        accelerator: 'Ctrl+Command+F',\n        click() {\n          mainWindow.setFullScreen(!mainWindow.isFullScreen());\n        }\n      }]\n    }, {\n      label: 'Window',\n      submenu: [{\n        label: 'Minimize',\n        accelerator: 'Command+M',\n        selector: 'performMiniaturize:'\n      }, {\n        label: 'Close',\n        accelerator: 'Command+W',\n        selector: 'performClose:'\n      }, {\n        type: 'separator'\n      }, {\n        label: 'Bring All to Front',\n        selector: 'arrangeInFront:'\n      }]\n    }, {\n      label: 'Help',\n      submenu: [{\n        label: 'Learn More',\n        click() {\n          shell.openExternal('http://electron.atom.io');\n        }\n      }, {\n        label: 'Documentation',\n        click() {\n          shell.openExternal('https://github.com/atom/electron/tree/master/docs#readme');\n        }\n      }, {\n        label: 'Community Discussions',\n        click() {\n          shell.openExternal('https://discuss.atom.io/c/electron');\n        }\n      }, {\n        label: 'Search Issues',\n        click() {\n          shell.openExternal('https://github.com/atom/electron/issues');\n        }\n      }]\n    }];\n\n    menu = Menu.buildFromTemplate(template);\n    Menu.setApplicationMenu(menu);\n  } else {\n    template = [{\n      label: '&File',\n      submenu: [{\n        label: '&Open',\n        accelerator: 'Ctrl+O'\n      }, {\n        label: '&Close',\n        accelerator: 'Ctrl+W',\n        click() {\n          mainWindow.close();\n        }\n      }]\n    }, {\n      label: '&View',\n      submenu: (process.env.NODE_ENV === 'development') ? [{\n        label: '&Reload',\n        accelerator: 'Ctrl+R',\n        click() {\n          mainWindow.restart();\n        }\n      }, {\n        label: 'Toggle &Full Screen',\n        accelerator: 'F11',\n        click() {\n          mainWindow.setFullScreen(!mainWindow.isFullScreen());\n        }\n      }, {\n        label: 'Toggle &Developer Tools',\n        accelerator: 'Alt+Ctrl+I',\n        click() {\n          mainWindow.toggleDevTools();\n        }\n      }] : [{\n        label: 'Toggle &Full Screen',\n        accelerator: 'F11',\n        click() {\n          mainWindow.setFullScreen(!mainWindow.isFullScreen());\n        }\n      }]\n    }, {\n      label: 'Help',\n      submenu: [{\n        label: 'Learn More',\n        click() {\n          shell.openExternal('http://electron.atom.io');\n        }\n      }, {\n        label: 'Documentation',\n        click() {\n          shell.openExternal('https://github.com/atom/electron/tree/master/docs#readme');\n        }\n      }, {\n        label: 'Community Discussions',\n        click() {\n          shell.openExternal('https://discuss.atom.io/c/electron');\n        }\n      }, {\n        label: 'Search Issues',\n        click() {\n          shell.openExternal('https://github.com/atom/electron/issues');\n        }\n      }]\n    }];\n    menu = Menu.buildFromTemplate(template);\n    mainWindow.setMenu(menu);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-electron-react-boilerplate/node_modules/electron-react-boilerplate/package.js":"/* eslint strict: 0, no-shadow: 0, no-unused-vars: 0, no-console: 0 */\n'use strict';\n\nrequire('babel-polyfill');\nconst os = require('os');\nconst webpack = require('webpack');\nconst electronCfg = require('./webpack.config.electron.js');\nconst cfg = require('./webpack.config.production.js');\nconst packager = require('electron-packager');\nconst del = require('del');\nconst exec = require('child_process').exec;\nconst argv = require('minimist')(process.argv.slice(2));\nconst pkg = require('./package.json');\nconst deps = Object.keys(pkg.dependencies);\nconst devDeps = Object.keys(pkg.devDependencies);\n\nconst appName = argv.name || argv.n || pkg.productName;\nconst shouldUseAsar = argv.asar || argv.a || false;\nconst shouldBuildAll = argv.all || false;\n\n\nconst DEFAULT_OPTS = {\n  dir: './',\n  name: appName,\n  asar: shouldUseAsar,\n  ignore: [\n    '/test($|/)',\n    '/tools($|/)',\n    '/release($|/)',\n    '/main.development.js'\n  ].concat(devDeps.map(name => `/node_modules/${name}($|/)`))\n  .concat(\n    deps.filter(name => !electronCfg.externals.includes(name))\n      .map(name => `/node_modules/${name}($|/)`)\n  )\n};\n\nconst icon = argv.icon || argv.i || 'app/app';\n\nif (icon) {\n  DEFAULT_OPTS.icon = icon;\n}\n\nconst version = argv.version || argv.v;\n\nif (version) {\n  DEFAULT_OPTS.version = version;\n  startPack();\n} else {\n  // use the same version as the currently-installed electron-prebuilt\n  exec('npm list electron-prebuilt --dev', (err, stdout) => {\n    if (err) {\n      DEFAULT_OPTS.version = '0.37.6';\n    } else {\n      DEFAULT_OPTS.version = stdout.split('electron-prebuilt@')[1].replace(/\\s/g, '');\n    }\n\n    startPack();\n  });\n}\n\n\nfunction build(cfg) {\n  return new Promise((resolve, reject) => {\n    webpack(cfg, (err, stats) => {\n      if (err) return reject(err);\n      resolve(stats);\n    });\n  });\n}\n\nfunction startPack() {\n  console.log('start pack...');\n  build(electronCfg)\n    .then(() => build(cfg))\n    .then(() => del('release'))\n    .then(paths => {\n      if (shouldBuildAll) {\n        // build for all platforms\n        const archs = ['ia32', 'x64'];\n        const platforms = ['linux', 'win32', 'darwin'];\n\n        platforms.forEach(plat => {\n          archs.forEach(arch => {\n            pack(plat, arch, log(plat, arch));\n          });\n        });\n      } else {\n        // build for current platform only\n        pack(os.platform(), os.arch(), log(os.platform(), os.arch()));\n      }\n    })\n    .catch(err => {\n      console.error(err);\n    });\n}\n\nfunction pack(plat, arch, cb) {\n  // there is no darwin ia32 electron\n  if (plat === 'darwin' && arch === 'ia32') return;\n\n  const iconObj = {\n    icon: DEFAULT_OPTS.icon + (() => {\n      let extension = '.png';\n      if (plat === 'darwin') {\n        extension = '.icns';\n      } else if (plat === 'win32') {\n        extension = '.ico';\n      }\n      return extension;\n    })()\n  };\n\n  const opts = Object.assign({}, DEFAULT_OPTS, iconObj, {\n    platform: plat,\n    arch,\n    prune: true,\n    'app-version': pkg.version || DEFAULT_OPTS.version,\n    out: `release/${plat}-${arch}`\n  });\n\n  packager(opts, cb);\n}\n\n\nfunction log(plat, arch) {\n  return (err, filepath) => {\n    if (err) return console.error(err);\n    console.log(`${plat}-${arch} finished!`);\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-electron-react-boilerplate/node_modules/electron-react-boilerplate/server.js":"/* eslint no-console: 0 */\n\nimport express from 'express';\nimport webpack from 'webpack';\nimport webpackDevMiddleware from 'webpack-dev-middleware';\nimport webpackHotMiddleware from 'webpack-hot-middleware';\n\nimport config from './webpack.config.development';\n\nconst app = express();\nconst compiler = webpack(config);\nconst PORT = 3000;\n\napp.use(webpackDevMiddleware(compiler, {\n  publicPath: config.output.publicPath,\n  stats: {\n    colors: true\n  }\n}));\n\napp.use(webpackHotMiddleware(compiler));\n\napp.listen(PORT, 'localhost', err => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n\n  console.log(`Listening at http://localhost:${PORT}`);\n});\n","/home/travis/build/npmtest/node-npmtest-electron-react-boilerplate/node_modules/electron-react-boilerplate/webpack.config.base.js":"import path from 'path';\n\nexport default {\n  module: {\n    loaders: [{\n      test: /\\.jsx?$/,\n      loaders: ['babel-loader'],\n      exclude: /node_modules/\n    }, {\n      test: /\\.json$/,\n      loader: 'json-loader'\n    }]\n  },\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: 'bundle.js',\n    libraryTarget: 'commonjs2'\n  },\n  resolve: {\n    extensions: ['', '.js', '.jsx'],\n    packageMains: ['webpack', 'browser', 'web', 'browserify', ['jam', 'main'], 'main']\n  },\n  plugins: [\n\n  ],\n  externals: [\n    // put your node 3rd party libraries which can't be built with webpack here\n    // (mysql, mongodb, and so on..)\n  ]\n};\n","/home/travis/build/npmtest/node-npmtest-electron-react-boilerplate/node_modules/electron-react-boilerplate/webpack.config.development.js":"/* eslint max-len: 0 */\nimport webpack from 'webpack';\nimport baseConfig from './webpack.config.base';\n\nconst config = {\n  ...baseConfig,\n\n  debug: true,\n\n  devtool: 'cheap-module-eval-source-map',\n\n  entry: [\n    'webpack-hot-middleware/client?path=http://localhost:3000/__webpack_hmr',\n    './app/index'\n  ],\n\n  output: {\n    ...baseConfig.output,\n    publicPath: 'http://localhost:3000/dist/'\n  },\n\n  module: {\n    ...baseConfig.module,\n    loaders: [\n      ...baseConfig.module.loaders,\n\n      {\n        test: /\\.global\\.css$/,\n        loaders: [\n          'style-loader',\n          'css-loader?sourceMap'\n        ]\n      },\n\n      {\n        test: /^((?!\\.global).)*\\.css$/,\n        loaders: [\n          'style-loader',\n          'css-loader?modules&sourceMap&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]'\n        ]\n      }\n    ]\n  },\n\n  plugins: [\n    ...baseConfig.plugins,\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoErrorsPlugin(),\n    new webpack.DefinePlugin({\n      __DEV__: true,\n      'process.env': {\n        NODE_ENV: JSON.stringify('development')\n      }\n    })\n  ],\n\n  target: 'electron-renderer'\n};\n\nexport default config;\n","/home/travis/build/npmtest/node-npmtest-electron-react-boilerplate/node_modules/electron-react-boilerplate/webpack.config.electron.js":"import webpack from 'webpack';\nimport baseConfig from './webpack.config.base';\n\nexport default {\n  ...baseConfig,\n\n  devtool: 'source-map',\n\n  entry: './main.development',\n\n  output: {\n    path: __dirname,\n    filename: './main.js'\n  },\n\n  plugins: [\n    new webpack.optimize.UglifyJsPlugin({\n      compressor: {\n        warnings: false\n      }\n    }),\n    new webpack.BannerPlugin(\n      'require(\"source-map-support\").install();',\n      { raw: true, entryOnly: false }\n    ),\n    new webpack.DefinePlugin({\n      'process.env': {\n        NODE_ENV: JSON.stringify('production')\n      }\n    })\n  ],\n\n  target: 'electron-main',\n\n  node: {\n    __dirname: false,\n    __filename: false\n  },\n\n  externals: [\n    ...baseConfig.externals,\n    'font-awesome',\n    'source-map-support'\n  ]\n};\n","/home/travis/build/npmtest/node-npmtest-electron-react-boilerplate/node_modules/electron-react-boilerplate/webpack.config.node.js":"// for babel-plugin-webpack-loaders\nrequire('babel-register');\nconst devConfigs = require('./webpack.config.development');\n\nmodule.exports = {\n  output: {\n    libraryTarget: 'commonjs2'\n  },\n  module: {\n    loaders: devConfigs.module.loaders.slice(1)  // remove babel-loader\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-electron-react-boilerplate/node_modules/electron-react-boilerplate/webpack.config.production.js":"import webpack from 'webpack';\nimport ExtractTextPlugin from 'extract-text-webpack-plugin';\nimport baseConfig from './webpack.config.base';\n\nconst config = {\n  ...baseConfig,\n\n  devtool: 'source-map',\n\n  entry: './app/index',\n\n  output: {\n    ...baseConfig.output,\n\n    publicPath: '../dist/'\n  },\n\n  module: {\n    ...baseConfig.module,\n\n    loaders: [\n      ...baseConfig.module.loaders,\n\n      {\n        test: /\\.global\\.css$/,\n        loader: ExtractTextPlugin.extract(\n          'style-loader',\n          'css-loader'\n        )\n      },\n\n      {\n        test: /^((?!\\.global).)*\\.css$/,\n        loader: ExtractTextPlugin.extract(\n          'style-loader',\n          'css-loader?modules&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]'\n        )\n      }\n    ]\n  },\n\n  plugins: [\n    ...baseConfig.plugins,\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new webpack.DefinePlugin({\n      __DEV__: false,\n      'process.env': {\n        NODE_ENV: JSON.stringify('production')\n      }\n    }),\n    new webpack.optimize.UglifyJsPlugin({\n      compressor: {\n        screw_ie8: true,\n        warnings: false\n      }\n    }),\n    new ExtractTextPlugin('style.css', { allChunks: true })\n  ],\n\n  target: 'electron-renderer'\n};\n\nexport default config;\n","/home/travis/build/npmtest/node-npmtest-electron-react-boilerplate/node_modules/electron-react-boilerplate/app/routes.js":"import React from 'react';\nimport { Route, IndexRoute } from 'react-router';\nimport App from './containers/App';\nimport HomePage from './containers/HomePage';\nimport CounterPage from './containers/CounterPage';\n\n\nexport default (\n  <Route path=\"/\" component={App}>\n    <IndexRoute component={HomePage} />\n    <Route path=\"/counter\" component={CounterPage} />\n  </Route>\n);\n","/home/travis/build/npmtest/node-npmtest-electron-react-boilerplate/node_modules/electron-react-boilerplate/app/actions/counter.js":"export const INCREMENT_COUNTER = 'INCREMENT_COUNTER';\nexport const DECREMENT_COUNTER = 'DECREMENT_COUNTER';\n\nexport function increment() {\n  return {\n    type: INCREMENT_COUNTER\n  };\n}\n\nexport function decrement() {\n  return {\n    type: DECREMENT_COUNTER\n  };\n}\n\nexport function incrementIfOdd() {\n  return (dispatch, getState) => {\n    const { counter } = getState();\n\n    if (counter % 2 === 0) {\n      return;\n    }\n\n    dispatch(increment());\n  };\n}\n\nexport function incrementAsync(delay = 1000) {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(increment());\n    }, delay);\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-electron-react-boilerplate/node_modules/electron-react-boilerplate/app/components/Counter.js":"import React, { Component, PropTypes } from 'react';\nimport { Link } from 'react-router';\nimport styles from './Counter.css';\n\nclass Counter extends Component {\n  static propTypes = {\n    increment: PropTypes.func.isRequired,\n    incrementIfOdd: PropTypes.func.isRequired,\n    incrementAsync: PropTypes.func.isRequired,\n    decrement: PropTypes.func.isRequired,\n    counter: PropTypes.number.isRequired\n  };\n\n  render() {\n    const { increment, incrementIfOdd, incrementAsync, decrement, counter } = this.props;\n    return (\n      <div>\n        <div className={styles.backButton}>\n          <Link to=\"/\">\n            <i className=\"fa fa-arrow-left fa-3x\" />\n          </Link>\n        </div>\n        <div className={`counter ${styles.counter}`}>\n          {counter}\n        </div>\n        <div className={styles.btnGroup}>\n          <button className={styles.btn} onClick={increment}>\n            <i className=\"fa fa-plus\"></i>\n          </button>\n          <button className={styles.btn} onClick={decrement}>\n            <i className=\"fa fa-minus\"></i>\n          </button>\n          <button className={styles.btn} onClick={incrementIfOdd}>odd</button>\n          <button className={styles.btn} onClick={() => incrementAsync()}>async</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Counter;\n","/home/travis/build/npmtest/node-npmtest-electron-react-boilerplate/node_modules/electron-react-boilerplate/app/components/Home.js":"import React, { Component } from 'react';\nimport { Link } from 'react-router';\nimport styles from './Home.css';\n\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div>\n        <div className={styles.container}>\n          <h2>Home</h2>\n          <Link to=\"/counter\">to Counter</Link>\n        </div>\n      </div>\n    );\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-electron-react-boilerplate/node_modules/electron-react-boilerplate/app/containers/App.js":"import React, { Component, PropTypes } from 'react';\n\nexport default class App extends Component {\n  static propTypes = {\n    children: PropTypes.element.isRequired\n  };\n\n  render() {\n    return (\n      <div>\n        {this.props.children}\n        {\n          (() => {\n            if (process.env.NODE_ENV !== 'production') {\n              const DevTools = require('./DevTools');\n              return <DevTools />;\n            }\n          })()\n        }\n      </div>\n    );\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-electron-react-boilerplate/node_modules/electron-react-boilerplate/app/containers/CounterPage.js":"import { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Counter from '../components/Counter';\nimport * as CounterActions from '../actions/counter';\n\nfunction mapStateToProps(state) {\n  return {\n    counter: state.counter\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(CounterActions, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\n","/home/travis/build/npmtest/node-npmtest-electron-react-boilerplate/node_modules/electron-react-boilerplate/app/containers/DevTools.js":"import React from 'react';\nimport { createDevTools } from 'redux-devtools';\nimport LogMonitor from 'redux-devtools-log-monitor';\nimport DockMonitor from 'redux-devtools-dock-monitor';\n\nexport default createDevTools(\n  <DockMonitor\n    toggleVisibilityKey=\"ctrl-h\"\n    changePositionKey=\"ctrl-q\"\n  >\n    <LogMonitor />\n  </DockMonitor>\n);\n","/home/travis/build/npmtest/node-npmtest-electron-react-boilerplate/node_modules/electron-react-boilerplate/app/containers/HomePage.js":"import React, { Component } from 'react';\nimport Home from '../components/Home';\n\nexport default class HomePage extends Component {\n  render() {\n    return (\n      <Home />\n    );\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-electron-react-boilerplate/node_modules/electron-react-boilerplate/app/reducers/counter.js":"import { INCREMENT_COUNTER, DECREMENT_COUNTER } from '../actions/counter';\n\nexport default function counter(state = 0, action) {\n  switch (action.type) {\n    case INCREMENT_COUNTER:\n      return state + 1;\n    case DECREMENT_COUNTER:\n      return state - 1;\n    default:\n      return state;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-electron-react-boilerplate/node_modules/electron-react-boilerplate/app/store/configureStore.development.js":"import { createStore, applyMiddleware, compose } from 'redux';\nimport { persistState } from 'redux-devtools';\nimport thunk from 'redux-thunk';\nimport createLogger from 'redux-logger';\nimport { hashHistory } from 'react-router';\nimport { routerMiddleware } from 'react-router-redux';\nimport rootReducer from '../reducers';\nimport DevTools from '../containers/DevTools';\n\nconst logger = createLogger({\n  level: 'info',\n  collapsed: true,\n});\n\nconst router = routerMiddleware(hashHistory);\n\nconst enhancer = compose(\n  applyMiddleware(thunk, router, logger),\n  DevTools.instrument(),\n  persistState(\n    window.location.href.match(\n      /[?&]debug_session=([^&]+)\\b/\n    )\n  )\n);\n\nexport default function configureStore(initialState) {\n  const store = createStore(rootReducer, initialState, enhancer);\n\n  if (module.hot) {\n    module.hot.accept('../reducers', () =>\n      store.replaceReducer(require('../reducers'))\n    );\n  }\n\n  return store;\n}\n","/home/travis/build/npmtest/node-npmtest-electron-react-boilerplate/node_modules/electron-react-boilerplate/app/store/configureStore.js":"if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./configureStore.production');\n} else {\n  module.exports = require('./configureStore.development');\n}\n","/home/travis/build/npmtest/node-npmtest-electron-react-boilerplate/node_modules/electron-react-boilerplate/app/store/configureStore.production.js":"import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { hashHistory } from 'react-router';\nimport { routerMiddleware } from 'react-router-redux';\nimport rootReducer from '../reducers';\n\nconst router = routerMiddleware(hashHistory);\n\nconst enhancer = applyMiddleware(thunk, router);\n\nexport default function configureStore(initialState) {\n  return createStore(rootReducer, initialState, enhancer);\n}\n"}